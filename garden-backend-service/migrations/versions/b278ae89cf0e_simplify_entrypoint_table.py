"""simplify entrypoint table

Revision ID: b278ae89cf0e
Revises: b7c6647b0e70
Create Date: 2024-05-30 19:00:38.266025

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "b278ae89cf0e"
down_revision: Union[str, None] = "b7c6647b0e70"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("authors")
    op.drop_table("test_functions")
    op.drop_table("users")
    op.drop_table("tags")
    op.add_column(
        "entrypoints",
        sa.Column("authors", postgresql.ARRAY(sa.String()), nullable=False),
    )
    op.add_column(
        "entrypoints", sa.Column("tags", postgresql.ARRAY(sa.String()), nullable=False)
    )
    op.add_column(
        "entrypoints",
        sa.Column("test_functions", postgresql.ARRAY(sa.String()), nullable=False),
    )
    op.alter_column(
        "entrypoints",
        "function_text",
        existing_type=sa.TEXT(),
        type_=sa.String(),
        existing_nullable=False,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "entrypoints",
        "function_text",
        existing_type=sa.String(),
        type_=sa.TEXT(),
        existing_nullable=False,
    )
    op.drop_column("entrypoints", "test_functions")
    op.drop_column("entrypoints", "tags")
    op.drop_column("entrypoints", "authors")
    op.create_table(
        "tags",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("text", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("entrypoint_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["entrypoint_id"], ["entrypoints.id"], name="tags_entrypoint_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="tags_pkey"),
    )
    op.create_table(
        "users",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("username", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("identity_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.PrimaryKeyConstraint("id", name="users_pkey"),
        sa.UniqueConstraint("identity_id", name="users_identity_id_key"),
    )
    op.create_table(
        "test_functions",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("function_text", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column("entrypoint_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["entrypoint_id"],
            ["entrypoints.id"],
            name="test_functions_entrypoint_id_fkey",
        ),
        sa.PrimaryKeyConstraint("id", name="test_functions_pkey"),
    )
    op.create_table(
        "authors",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("entrypoint_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["entrypoint_id"], ["entrypoints.id"], name="authors_entrypoint_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="authors_pkey"),
    )
    # ### end Alembic commands ###
