# generated by datamodel-codegen:
#   filename:  OpenAPI.yaml
#   timestamp: 2024-04-16T22:15:44+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field


class Attributes(BaseModel):
    name: Optional[str] = None
    symbol: Optional[str] = None
    contactName: Optional[str] = None
    contactEmail: Optional[str] = None
    description: Optional[str] = None
    domains: Optional[str] = None
    url: Optional[str] = None
    created: Optional[str] = None
    updated: Optional[str] = None


class Data(BaseModel):
    id: Optional[str] = None
    type: Optional[str] = None
    attributes: Optional[Attributes] = None


class Client(BaseModel):
    data: Optional[Data] = None


class Attributes1(BaseModel):
    created: Optional[str] = None
    updated: Optional[str] = None


class Data1(BaseModel):
    id: Optional[str] = None
    type: Optional[str] = None
    attributes: Optional[Attributes1] = None


class ClientPrefix(BaseModel):
    data: Optional[Data1] = None


class Attributes2(BaseModel):
    prov_wasGeneratedBy: Optional[str] = Field(None, alias='prov:wasGeneratedBy')
    prov_generatedAtTime: Optional[str] = Field(None, alias='prov:generatedAtTime')
    prov_wasDerivedFrom: Optional[str] = Field(None, alias='prov:wasDerivedFrom')
    prov_wasAttributedTo: Optional[str] = Field(None, alias='prov:wasAttributedTo')
    action: Optional[str] = None
    version: Optional[float] = None
    changes: Optional[Dict[str, Any]] = None


class Data2(BaseModel):
    id: Optional[str] = Field(None, example='0000-0000-0000-0000')
    type: Optional[str] = None
    attributes: Optional[Attributes2] = None


class Activity(BaseModel):
    data: Optional[Data2] = None


class Type(str, Enum):
    dois = 'dois'


class Type1(str, Enum):
    dois = 'dois'


class Links(BaseModel):
    self: Optional[str] = None
    next: Optional[str] = None


class Event(str, Enum):
    publish = 'publish'
    register = 'register'
    hide = 'hide'


class Identifier(BaseModel):
    identifier: Optional[str] = None
    identifierType: Optional[str] = None


class AlternateIdentifier(BaseModel):
    alternateIdentifierType: Optional[str] = None
    alternateIdentifier: Optional[str] = None


class ViewsOverTimeItem(BaseModel):
    yearMonth: Optional[str] = None
    total: Optional[float] = None


class DownloadsOverTimeItem(BaseModel):
    yearMonth: Optional[str] = None
    total: Optional[float] = None


class CitationsOverTimeItem(BaseModel):
    yearMonth: Optional[str] = None
    total: Optional[float] = None


class LandingPage(BaseModel):
    checked: Optional[str] = None
    url: Optional[str] = None
    contentType: Optional[str] = None
    error: Optional[str] = None
    redirectCount: Optional[float] = None
    redirectUrls: Optional[List[str]] = None
    downloadLatency: Optional[float] = None
    hasSchemaOrg: Optional[bool] = None
    schemaOrgid: Optional[str] = None
    dcIdentifier: Optional[str] = None
    citationDoi: Optional[str] = None
    bodyhasPid: Optional[bool] = None


class Identifier1(BaseModel):
    identifier: Optional[str] = None
    identifierType: Optional[str] = None


class NameIdentifier(BaseModel):
    nameIdentifier: Optional[str] = None
    nameIdentifierScheme: Optional[str] = None
    schemeUri: Optional[str] = None


class AffiliationItem(BaseModel):
    affiliationIdentifier: Optional[str] = None
    affiliationIdentifierScheme: Optional[str] = None
    name: Optional[str] = None
    schemeUri: Optional[str] = None


class Publisher(BaseModel):
    name: Optional[str] = None
    publisherIdentifier: Optional[str] = None
    publisherIdentifierScheme: Optional[str] = None
    schemeUri: Optional[str] = None
    lang: Optional[str] = None


class Container(BaseModel):
    type: Optional[str] = None
    identifier: Optional[str] = None
    identifierType: Optional[str] = None
    title: Optional[str] = None
    volume: Optional[str] = None
    issue: Optional[str] = None
    firstPage: Optional[str] = None
    lastPage: Optional[str] = None


class Subject(BaseModel):
    subject: Optional[str] = None
    subjectScheme: Optional[str] = None
    schemeUri: Optional[str] = None
    valueUri: Optional[str] = None
    lang: Optional[str] = None
    classificationCode: Optional[str] = None


class NameIdentifier1(BaseModel):
    nameIdentifier: Optional[str] = None
    nameIdentifierScheme: Optional[str] = None
    schemeUri: Optional[str] = None


class AffiliationItem1(BaseModel):
    affiliationIdentifier: Optional[str] = None
    affiliationIdentifierScheme: Optional[str] = None
    name: Optional[str] = None
    schemeUri: Optional[str] = None


class DateType(str, Enum):
    Accepted = 'Accepted'
    Available = 'Available'
    Copyrighted = 'Copyrighted'
    Collected = 'Collected'
    Created = 'Created'
    Issued = 'Issued'
    Submitted = 'Submitted'
    Updated = 'Updated'
    Valid = 'Valid'
    Withdrawn = 'Withdrawn'
    Other = 'Other'


class Date(BaseModel):
    date: Optional[str] = None
    dateType: Optional[DateType] = None
    dateInformation: Optional[str] = None


class NumberType(str, Enum):
    Article = 'Article'
    Chapter = 'Chapter'
    Report = 'Report'
    Other = 'Other'


class RightsListItem(BaseModel):
    rights: Optional[str] = None
    rightsUri: Optional[str] = None
    schemeUri: Optional[str] = None
    rightsIdentifier: Optional[str] = None
    rightsIdentifierScheme: Optional[str] = None
    lang: Optional[str] = None


class DescriptionType(str, Enum):
    Abstract = 'Abstract'
    Methods = 'Methods'
    SeriesInformation = 'SeriesInformation'
    TableOfContents = 'TableOfContents'
    TechnicalInfo = 'TechnicalInfo'
    Other = 'Other'


class Description(BaseModel):
    description: Optional[str] = None
    descriptionType: Optional[DescriptionType] = None
    lang: Optional[str] = None


class GeoLocationPoint(BaseModel):
    pointLongitude: Optional[str] = None
    pointLatitude: Optional[str] = None


class GeoLocationBox(BaseModel):
    westBoundLongitude: Optional[str] = None
    eastBoundLongitude: Optional[str] = None
    southBoundLatitude: Optional[str] = None
    northBoundLatitude: Optional[str] = None


class GeoLocation(BaseModel):
    geoLocationPoint: Optional[GeoLocationPoint] = None
    geoLocationBox: Optional[GeoLocationBox] = None
    geoLocationPlace: Optional[str] = None


class FunderIdentifierType(str, Enum):
    Crossref_Funder_ID = 'Crossref Funder ID'
    GRID = 'GRID'
    ISNI = 'ISNI'
    ROR = 'ROR'
    Other = 'Other'


class FundingReference(BaseModel):
    funderName: Optional[str] = None
    funderIdentifier: Optional[str] = None
    funderIdentifierType: Optional[FunderIdentifierType] = None
    awardNumber: Optional[str] = None
    awardUri: Optional[str] = None
    awardTitle: Optional[str] = None


class DoiPropertiesOther(BaseModel):
    url: Optional[str] = None
    contentUrl: Optional[List[str]] = None
    metadataVersion: Optional[float] = None
    schemaVersion: Optional[str] = None
    source: Optional[str] = None
    isActive: Optional[bool] = None
    state: Optional[str] = None
    reason: Optional[str] = None


class DoiPropertiesDates(BaseModel):
    created: Optional[str] = None
    registered: Optional[str] = None
    updated: Optional[str] = None


class DoiDataObject(BaseModel):
    id: Optional[str] = None
    type: Optional[str] = None


class DoiDataArray(BaseModel):
    __root__: List[DoiDataObject]


class DoiMetaObject(BaseModel):
    id: Optional[str] = None
    type: Optional[str] = None
    count: Optional[float] = None


class DoiMetaArray(BaseModel):
    __root__: List[DoiMetaObject]


class MessageAction(str, Enum):
    create = 'create'
    delete = 'delete'


class Attributes3(BaseModel):
    subjId: Optional[str] = None
    objId: Optional[str] = None
    messageAction: Optional[MessageAction] = None
    relationTypeId: Optional[str] = None
    sourceToken: Optional[str] = None
    sourceId: Optional[str] = None
    total: Optional[float] = None
    license: Optional[str] = None
    occuredAt: Optional[str] = None
    timestamp: Optional[str] = None
    subj: Optional[Dict[str, Any]] = None
    obj: Optional[Dict[str, Any]] = None


class Data4(BaseModel):
    id: Optional[str] = None
    type: Optional[str] = None
    attributes: Optional[Attributes3] = None


class Event1(BaseModel):
    data: Optional[Data4] = None


class Data5(BaseModel):
    prefix: Optional[str] = None


class Prefix(BaseModel):
    data: Optional[Data5] = None


class Attributes4(BaseModel):
    created: Optional[str] = None
    updated: Optional[str] = None


class Data6(BaseModel):
    id: Optional[str] = None
    attributes: Optional[Attributes4] = None


class ProviderPrefix(BaseModel):
    data: Optional[Data6] = None


class Data7(BaseModel):
    id: Optional[str] = None
    name: Optional[str] = None
    symbol: Optional[str] = None


class Provider1(BaseModel):
    data: Optional[Data7] = None


class Data8(BaseModel):
    id: Optional[str] = Field(None, example='0000-0000-0000-0000')
    report_name: Optional[str] = Field(
        None,
        alias='report-name',
        description='The long name of the report.',
        example='Dataset Report',
    )
    report_id: Optional[str] = Field(
        None,
        alias='report-id',
        description='The report ID or code or shortname. Typically this will be the same code provided in the Report parameter of the request.',
        example='DSR',
    )
    release: Optional[str] = Field(
        None, description='The release or version of the report.', example='RD1'
    )
    created: Optional[str] = Field(
        None,
        description='Time the report was prepared. Format as defined by date-time - RFC3339',
        example='2016-09-08T22:47:31Z',
    )
    created_by: Optional[str] = Field(
        None,
        alias='created-by',
        description='Name of the organization producing the report.',
        example='DataONE',
    )
    report_filters: Optional[str] = Field(
        None,
        alias='report-filters',
        description='Zero or more report filters used for this report. Typically reflect filters provided on the Request. Filters limit the data to be reported on.',
    )
    report_attributes: Optional[str] = Field(
        None,
        alias='report-attributes',
        description='Zero or more additional attributes applied to the report. Attributes inform the level of detail in the report.',
    )
    reporting_period: Optional[str] = Field(
        None, alias='reporting-period', description='Time the report was prepared.'
    )
    report_datasets: Optional[str] = Field(
        None,
        alias='report-datasets',
        description='Defines the output for the Report_Datasets being returned in a Dataset Report. Collection of datasets from the report.',
    )


class Report(BaseModel):
    data: Optional[Data8] = None


class RelationType(str, Enum):
    IsCitedBy = 'IsCitedBy'
    Cites = 'Cites'
    IsSupplementTo = 'IsSupplementTo'
    IsSupplementedBy = 'IsSupplementedBy'
    IsContinuedBy = 'IsContinuedBy'
    Continues = 'Continues'
    IsDescribedBy = 'IsDescribedBy'
    Describes = 'Describes'
    HasMetadata = 'HasMetadata'
    IsMetadataFor = 'IsMetadataFor'
    HasVersion = 'HasVersion'
    IsVersionOf = 'IsVersionOf'
    IsNewVersionOf = 'IsNewVersionOf'
    IsPreviousVersionOf = 'IsPreviousVersionOf'
    IsPartOf = 'IsPartOf'
    HasPart = 'HasPart'
    IsPublishedIn = 'IsPublishedIn'
    IsReferencedBy = 'IsReferencedBy'
    References = 'References'
    IsDocumentedBy = 'IsDocumentedBy'
    Documents = 'Documents'
    IsCompiledBy = 'IsCompiledBy'
    Compiles = 'Compiles'
    IsVariantFormOf = 'IsVariantFormOf'
    IsOriginalFormOf = 'IsOriginalFormOf'
    IsIdenticalTo = 'IsIdenticalTo'
    IsReviewedBy = 'IsReviewedBy'
    Reviews = 'Reviews'
    IsDerivedFrom = 'IsDerivedFrom'
    IsSourceOf = 'IsSourceOf'
    IsRequiredBy = 'IsRequiredBy'
    Requires = 'Requires'
    IsObsoletedBy = 'IsObsoletedBy'
    Obsoletes = 'Obsoletes'
    IsCollectedBy = 'IsCollectedBy'
    Collects = 'Collects'


class ResourceTypeGeneral(str, Enum):
    Audiovisual = 'Audiovisual'
    Book = 'Book'
    BookChapter = 'BookChapter'
    Collection = 'Collection'
    ComputationalNotebook = 'ComputationalNotebook'
    ConferencePaper = 'ConferencePaper'
    ConferenceProceeding = 'ConferenceProceeding'
    DataPaper = 'DataPaper'
    Dataset = 'Dataset'
    Dissertation = 'Dissertation'
    Event = 'Event'
    Image = 'Image'
    Instrument = 'Instrument'
    InteractiveResource = 'InteractiveResource'
    Journal = 'Journal'
    JournalArticle = 'JournalArticle'
    Model = 'Model'
    OutputManagementPlan = 'OutputManagementPlan'
    PeerReview = 'PeerReview'
    PhysicalObject = 'PhysicalObject'
    Preprint = 'Preprint'
    Report = 'Report'
    Service = 'Service'
    Software = 'Software'
    Sound = 'Sound'
    Standard = 'Standard'
    StudyRegistration = 'StudyRegistration'
    Text = 'Text'
    Workflow = 'Workflow'
    Other = 'Other'


class ContributorType(str, Enum):
    ContactPerson = 'ContactPerson'
    DataCollector = 'DataCollector'
    DataCurator = 'DataCurator'
    DataManager = 'DataManager'
    Distributor = 'Distributor'
    Editor = 'Editor'
    HostingInstitution = 'HostingInstitution'
    Producer = 'Producer'
    ProjectLeader = 'ProjectLeader'
    ProjectManager = 'ProjectManager'
    ProjectMember = 'ProjectMember'
    RegistrationAgency = 'RegistrationAgency'
    RegistrationAuthority = 'RegistrationAuthority'
    RelatedPerson = 'RelatedPerson'
    Researcher = 'Researcher'
    ResearchGroup = 'ResearchGroup'
    RightsHolder = 'RightsHolder'
    Sponsor = 'Sponsor'
    Supervisor = 'Supervisor'
    WorkPackageLeader = 'WorkPackageLeader'
    Other = 'Other'


class RelatedIdentifierType(str, Enum):
    ARK = 'ARK'
    arXiv = 'arXiv'
    bibcode = 'bibcode'
    DOI = 'DOI'
    EAN13 = 'EAN13'
    EISSN = 'EISSN'
    Handle = 'Handle'
    IGSN = 'IGSN'
    ISBN = 'ISBN'
    ISSN = 'ISSN'
    ISTC = 'ISTC'
    LISSN = 'LISSN'
    LSID = 'LSID'
    PMID = 'PMID'
    PURL = 'PURL'
    UPC = 'UPC'
    URL = 'URL'
    URN = 'URN'
    w3id = 'w3id'


class TitleType(str, Enum):
    AlternativeTitle = 'AlternativeTitle'
    Subtitle = 'Subtitle'
    TranslatedTitle = 'TranslatedTitle'
    Other = 'Other'


class NameType(str, Enum):
    Personal = 'Personal'
    Organizational = 'Organizational'


class Client1(BaseModel):
    data: Optional[DoiDataObject] = None


class Provider(BaseModel):
    data: Optional[DoiDataObject] = None


class Media(BaseModel):
    data: Optional[DoiDataObject] = None


class References(BaseModel):
    data: Optional[DoiDataArray] = None


class Citations(BaseModel):
    data: Optional[DoiDataArray] = None


class Parts(BaseModel):
    data: Optional[DoiDataArray] = None


class PartOf(BaseModel):
    data: Optional[DoiDataArray] = None


class Versions(BaseModel):
    data: Optional[DoiDataArray] = None


class VersionOf(BaseModel):
    data: Optional[DoiDataArray] = None


class Relationships(BaseModel):
    client: Optional[Client1] = None
    provider: Optional[Provider] = None
    media: Optional[Media] = None
    references: Optional[References] = None
    citations: Optional[Citations] = None
    parts: Optional[Parts] = None
    partOf: Optional[PartOf] = None
    versions: Optional[Versions] = None
    versionOf: Optional[VersionOf] = None


class Client2(BaseModel):
    data: Optional[DoiDataObject] = None


class Relationships1(BaseModel):
    client: Optional[Client2] = None


class Meta(BaseModel):
    total: Optional[float] = None
    totalPages: Optional[float] = None
    page: Optional[float] = None
    states: Optional[DoiMetaArray] = None
    resourceTypes: Optional[DoiMetaArray] = None
    created: Optional[DoiMetaArray] = None
    published: Optional[DoiMetaArray] = None
    registered: Optional[DoiMetaArray] = None
    providers: Optional[DoiMetaArray] = None
    clients: Optional[DoiMetaArray] = None
    affiliations: Optional[DoiMetaArray] = None
    prefixes: Optional[DoiMetaArray] = None
    certificates: Optional[DoiMetaArray] = None
    licenses: Optional[DoiMetaArray] = None
    schemaVersions: Optional[DoiMetaArray] = None
    linkChecksStatus: Optional[DoiMetaArray] = None
    subjects: Optional[DoiMetaArray] = None
    fieldsOfScience: Optional[DoiMetaArray] = None
    citations: Optional[DoiMetaArray] = None
    views: Optional[DoiMetaArray] = None
    downloads: Optional[DoiMetaArray] = None


class Creator(BaseModel):
    nameType: Optional[NameType] = None
    nameIdentifiers: Optional[List[NameIdentifier]] = None
    name: Optional[str] = None
    givenName: Optional[str] = None
    familyName: Optional[str] = None
    affiliation: Optional[List[AffiliationItem]] = None
    lang: Optional[str] = None


class Title(BaseModel):
    title: Optional[str] = None
    titleType: Optional[TitleType] = None
    lang: Optional[str] = None


class Contributor(BaseModel):
    nameType: Optional[NameType] = None
    nameIdentifiers: Optional[List[NameIdentifier1]] = None
    name: Optional[str] = None
    givenName: Optional[str] = None
    familyName: Optional[str] = None
    affiliation: Optional[List[AffiliationItem1]] = None
    contributorType: Optional[ContributorType] = None
    lang: Optional[str] = None


class Types(BaseModel):
    resourceTypeGeneral: Optional[ResourceTypeGeneral] = None
    resourceType: Optional[str] = None
    schemaOrg: Optional[str] = None
    bibtex: Optional[str] = None
    citeproc: Optional[str] = None
    ris: Optional[str] = None


class RelatedIdentifier(BaseModel):
    relatedIdentifier: Optional[str] = None
    relatedIdentifierType: Optional[RelatedIdentifierType] = None
    relationType: Optional[RelationType] = None
    resourceTypeGeneral: Optional[ResourceTypeGeneral] = None
    relatedMetadataScheme: Optional[str] = None
    schemeUri: Optional[str] = None
    schemeType: Optional[str] = None


class RelatedItemIdentifier(BaseModel):
    relatedItemIdentifier: Optional[str] = None
    relatedItemIdentifierType: Optional[RelatedIdentifierType] = None
    relatedMetadataScheme: Optional[str] = None
    schemeURI: Optional[str] = None
    schemeType: Optional[str] = None


class Creator1(BaseModel):
    name: Optional[str] = None
    givenName: Optional[str] = None
    familyName: Optional[str] = None
    nameType: Optional[NameType] = None


class Title1(BaseModel):
    title: Optional[str] = None
    titleType: Optional[TitleType] = None


class Contributor1(BaseModel):
    name: Optional[str] = None
    givenName: Optional[str] = None
    familyName: Optional[str] = None
    nameType: Optional[NameType] = None
    contributorType: Optional[ContributorType] = None


class RelatedItem(BaseModel):
    relatedItemType: Optional[ResourceTypeGeneral] = None
    relationType: Optional[RelationType] = None
    relatedItemIdentifier: Optional[RelatedItemIdentifier] = None
    creators: Optional[List[Creator1]] = None
    titles: Optional[List[Title1]] = None
    volume: Optional[str] = None
    issue: Optional[str] = None
    number: Optional[str] = None
    numberType: Optional[NumberType] = None
    firstPage: Optional[str] = None
    lastPage: Optional[str] = None
    publisher: Optional[str] = None
    publicationYear: Optional[str] = None
    edition: Optional[str] = None
    contributors: Optional[List[Contributor1]] = None


class DoiPropertiesMetadata(BaseModel):
    creators: Optional[List[Creator]] = None
    titles: Optional[List[Title]] = None
    publisher: Optional[str] = None
    container: Optional[Container] = None
    publicationYear: Optional[int] = None
    subjects: Optional[List[Subject]] = None
    contributors: Optional[List[Contributor]] = None
    dates: Optional[List[Date]] = None
    language: Optional[str] = None
    types: Optional[Types] = None
    relatedIdentifiers: Optional[List[RelatedIdentifier]] = None
    relatedItems: Optional[List[RelatedItem]] = None
    sizes: Optional[List[str]] = None
    formats: Optional[List[str]] = None
    version: Optional[str] = None
    rightsList: Optional[List[RightsListItem]] = None
    descriptions: Optional[List[Description]] = None
    geoLocations: Optional[List[GeoLocation]] = None
    fundingReferences: Optional[List[FundingReference]] = None


class DoiAttributes(DoiPropertiesMetadata, DoiPropertiesOther, DoiPropertiesDates):
    doi: Optional[str] = None
    event: Optional[Event] = Field(
        None, description='Can be set to trigger a DOI state change.'
    )
    prefix: Optional[str] = None
    suffix: Optional[str] = None
    identifiers: Optional[List[Identifier]] = None
    alternateIdentifiers: Optional[List[AlternateIdentifier]] = None
    xml: Optional[str] = None
    viewCount: Optional[float] = None
    viewsOverTime: Optional[List[ViewsOverTimeItem]] = None
    downloadCount: Optional[float] = None
    downloadsOverTime: Optional[List[DownloadsOverTimeItem]] = None
    referenceCount: Optional[float] = None
    citationCount: Optional[float] = None
    citationsOverTime: Optional[List[CitationsOverTimeItem]] = None
    partCount: Optional[float] = None
    partOfCount: Optional[float] = None
    versionCount: Optional[float] = None
    versionOfCount: Optional[float] = None
    landingPage: Optional[LandingPage] = Field(
        None, description='Data describing the landing page, used by link checking.'
    )


class DoisAttributes(DoiPropertiesMetadata, DoiPropertiesOther, DoiPropertiesDates):
    doi: Optional[str] = None
    identifiers: Optional[List[Identifier1]] = None
    viewCount: Optional[float] = None
    downloadCount: Optional[float] = None
    referenceCount: Optional[float] = None
    citationCount: Optional[float] = None
    partCount: Optional[float] = None
    partOfCount: Optional[float] = None
    versionCount: Optional[float] = None
    versionOfCount: Optional[float] = None


class Data3(BaseModel):
    id: Optional[str] = None
    type: Type
    attributes: Optional[DoiAttributes] = None
    relationships: Optional[Relationships] = None


class Doi(BaseModel):
    data: Optional[Data3] = None


class Datum(BaseModel):
    id: Optional[str] = None
    type: Type1
    attributes: Optional[DoisAttributes] = None
    relationships: Optional[Relationships1] = None


class Dois(BaseModel):
    data: Optional[List[Datum]] = None
    meta: Optional[Meta] = None
    links: Optional[Links] = None
