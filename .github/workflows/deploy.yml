name: deploy

on:
  push:
    branches:
      - prod
      - dev
  workflow_dispatch:
permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read    # This is required for actions/checkout
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
    - name: configure aws credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: arn:aws:iam::557062710055:role/GH_Actions_Garden_Deployer
        role-session-name: garden-backend-deployer
        aws-region: us-east-1

    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
    # Determine the environment suffix to target to based on the branch
    - name: Set Environment
      id: vars
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/prod" ]]; then
          echo "::set-output name=env::prod"
        else
          echo "::set-output name=env::dev"
        fi

    - name: Upload Globus Auth Function
      run: |
         # Install the requirements.
         pip3 install --platform manylinux2010_x86_64 \
                      --use-deprecated=legacy-resolver  \
                      --implementation cp \
                      --only-binary=:all: --upgrade \
                      -r authorizer/requirements.txt -t ./packages
         # Put the requirements into the top level of our deployable zip archive.
         cd packages
         zip -r ../authorizer.zip *
         # Put the application code into the top level of our deployable zip archive.
         cd ../authorizer
         zip -r ../authorizer.zip *
         # Deploy to Lambda.
         aws lambda update-function-code --function-name GardenAuthorizer-${{ steps.vars.outputs.env }} --zip-file fileb://../authorizer.zip
         # Delete temporary packages directory
         cd ..
         rm -rf packages

    - name: Upload App Function
      run: |
        # Install the requirements.
        pip3 install --platform manylinux2010_x86_64 \
                      --use-deprecated=legacy-resolver  \
                      --implementation cp \
                      --only-binary=:all: --upgrade \
                      -r app/requirements.txt -t ./packages
        # Put the requirements into the top level of our deployable zip archive.
        cd packages
        zip -r ../app.zip *
        # Put the application code into the top level of our deployable zip archive.
        cd ../app
        zip -r ../app.zip *
        # Deploy to Lambda.
        aws lambda update-function-code --function-name GardenApp-${{ steps.vars.outputs.env }} --zip-file fileb://../app.zip
        # Delete temporary packages directory
        cd ..
        rm -rf packages
